type SrcTxExecutorOwnershipTransferred @entity {
  id: ID!
  previousOwner: Bytes! # address
  newOwner: Bytes! # address
}

type CCSmartWalletAddressUpdated @entity {
  id: ID!
  oldAddress: Bytes! # address
  newAddress: Bytes! # address
}

type SrcCrossSwap @entity {
  id: ID!
  srcToken: Bytes! # address
  srcAmount: BigInt! # address
  destChainId: BigInt! # uint256
  destToken: Bytes! # address
  minDestAmount: BigInt! # uint256
  destUser: Bytes! # address
  usdcIncome: BigInt! # uint256
  initiator: Bytes! # address
  srcTransactionHash: Bytes!
  txGasUsed: BigInt!
  txGasPrice: BigInt!
  blockHash: Bytes!
  blockNumber: BigInt!
  timestamp: BigInt!
}

type ArbitraryTxWasSent @entity {
  id: ID!
  to: Bytes! # address
  callData: Bytes! # bytes
}

type Deposit @entity {
  id: ID!
  sender: Bytes! # address
  amount: BigInt! # uint256
}

type MarketMakerUpdated @entity {
  id: ID!
  oldMarketMaker: Bytes! # address
  newMarketMaker: Bytes! # address
}

type DestCrossSwap @entity {
  id: ID!
  srcChainId: BigInt! # uint256
  srcTransactionHash: Bytes! # bytes32
  srcToken: Bytes! # address
  srcAmount: BigInt! # uint256
  destToken: Bytes! # address
  destAmount: BigInt! # uint256
  destUser: Bytes! # address 
  usdcOutcome: BigInt! # uint256
  initiator: Bytes! # address
  destTransactionHash: Bytes! # bytes32
  txGasUsed: BigInt!
  txGasPrice: BigInt!
  blockHash: Bytes!
  blockNumber: BigInt!
  timestamp: BigInt!
}

type CCSmartWalletOwnershipTransferred @entity {
  id: ID!
  previousOwner: Bytes! # address
  newOwner: Bytes! # address
}

type SrcTxExecutorUpdated @entity {
  id: ID!
  oldSrcTxExecutor: Bytes! # address
  newSrcTxExecutor: Bytes! # address
}